generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql" // or "postgres"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Event         Event[]
    TeamMember    TeamMember[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    id        String   @id @default(cuid())
    object    String?
    actor     Json?
    action    Json?
    target    Json?
    metadata  Json?
    location  String?
    occuredAt DateTime @default(now())
    teamId    String?
    team      Team?    @relation(fields: [teamId], references: [id])
    User      User?    @relation(fields: [userId], references: [id])
    userId    String?
    system    Boolean  @default(false)
}

model Team {
    id        String       @id @default(cuid())
    name      String
    slug      String       @unique @db.VarChar(255)
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    members   TeamMember[]
    events    Event[]
    Invertory Invertory?
}

model TeamMemberPermission {
    id         String       @id @default(cuid())
    name       String
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    TeamMember TeamMember[]
}

model TeamMember {
    id                     String                 @id @default(cuid())
    team                   Team                   @relation(fields: [teamId], references: [id])
    teamId                 String
    user                   User                   @relation(fields: [userId], references: [id])
    userId                 String
    createdAt              DateTime               @default(now())
    updatedAt              DateTime               @updatedAt
    TeamMemberPermissions  TeamMemberPermission[]
    teamMemberPermissionId String?
    deleted                Boolean                @default(false)
    @@index(userId)
}

model Invertory {
    id        String   @id @default(cuid())
    name      String
    slug      String   @unique @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    items     Item[]
    teamId    String?  @unique
    Team      Team?    @relation(fields: [teamId], references: [id])
}

model Item {
    id          String     @id @default(cuid())
    name        String
    qty         Int?
    slug        String     @unique @db.VarChar(255)
    Invertory   Invertory? @relation(fields: [invertoryId], references: [id])
    invertoryId String?
}
